> All Kotlin programs need to have a main() function

fun main(var_name : data_type,var_name : data_type ) {
    var age = 18
    println("Happy Birthday Shubhi")
    println("You are already ${age}!")
}

> fun stands for function. 
> main is the name of this function.
> comment //
> constants : 
    val age = "5"

> variable : 
    var roll = "6"
    var rolledValue: Int = 4

> loop :
    repeat(number)

> print 
    println \n = one full blank line
    print \n = next line

> condition statement
    if 
    else if
    else

Earlier, you learned that every Kotlin program must have a main() function. 
Android apps operate differently. 
Instead of calling a main() function, the Android system calls the onCreate() 
method of your MainActivity when your app is opened for the first time.

Android provides a framework of numerous classes to make writing Android apps easier,
but it needs to know exactly which class you mean. You can specify which class in the 
framework to use in your code by using an import statement. 
For example, the Button class is defined in android.widget.Button.

There are many assertions in the JUnit library. Some common assertions you might encounter are:

    assertEquals()
    assertNotEquals()
    assertThat()
    assertTrue()
    assertFalse()
    assertNull()
    assertNotNull()

An app can technically run more than one Kotlin function at once.
This is possible because of something called threads.

android 
{
    BuildFeatures
    {
        viewBinding = true
    }
}
val intent = Intent(this,SomeActivity::class.java)
startActivity(intent)

Use the super keyword to call the function that is defined in the parent.

XML stands for eXtensible Markup Language, which is a way of describing data using a text-based document.
Android Jetpack


(collection 

array of unrelated unique or duplicate dataset

types - 
1. list

    val list = listOf(2,3,4,5,6,6,7,3,4,5,6,5)
    val list = mutableListOf(2,3,4,5,6,6,7,3,4,5,6,5)

2. set (can't have duplicates)
    #order does matter
    [1,2,3]=[3,1,2]=[2,2,3,1,1]

    intersection : set1.intersect(set2)
    union : set1.union(set2)

3. map / dictionary

alpha = mutableMapOf<String,Int>(
    "a" to 1,
    "b" to 2,
)

alpha.put("c",3)
alpha[d]=4


forEach :  Instead of you specifying a variable for the current item, the forEach uses the special identifier it.


alpha.forEach{println("${it.key} is ${it.value}")} >> a,b,c,
println(alpha.map{"${it.key} is ${it.value}"}.joinToString(" , ")) >> a,b,c

filter : The filter() function returns the items in a collection that match, based on an expression.

println(alpha.filter{it.value%2 == 1})

Lambdas 

funtion types
(Int) -> Int

val square : (Int) -> Int = {a:Int -> a*a}

val double : (Int) -> Int = {a:Int -> a*2}
val double : (Int) -> Int = {it*2}

Higher order functions

sortedWith{str1 : String, str2 : String -> str1.length - str2.length} #ascending order of length
sortedWith{str1 : String, str2 : String -> str2.length - str1.length} #descending order of length

shuffled() >> shuffle list randomly
take(4) >> max 4 elements displayed 


costOfServiceEditText.setOnKeyListener { view, keyCode, event -> handleKeyEvent(view, keyCode) }

If you don't use a lambda parameter in the function body, you can name it _ to make your code more readable and less cluttered. This code has the same behavior.

costOfServiceEditText.setOnKeyListener { view, keyCode, _ -> handleKeyEvent(view, keyCode) }


startsWith() function returns true if a string starts with the specified string